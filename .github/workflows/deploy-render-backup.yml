name: Deploy to Render (API - Backup)

# Disabled - use deploy-simple.yml instead  
on:
  workflow_dispatch: # Manual trigger only

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render via API
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "üöÄ Triggering Render deployment for service ID: $RENDER_SERVICE_ID"
        echo "üì° Deploying service: closer-app"
        
        # First, let's test if the service exists
        echo "üîç Checking service status..."
        service_check=$(curl -s -w "\n%{http_code}" \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID" \
          -H "Authorization: Bearer $RENDER_API_KEY")
        
        service_code=$(echo "$service_check" | tail -n1)
        if [ "$service_code" -ne 200 ]; then
          echo "‚ùå Service not found or API key invalid"
          echo "Service check response: $(echo "$service_check" | head -n -1)"
          exit 1
        fi
        
        echo "‚úÖ Service found, triggering deployment..."
        
        # Try multiple API approaches
        echo "üîÑ Attempting deployment with empty body..."
        response=$(curl -s -w "\n%{http_code}" -X POST \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json")
        
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | head -n -1)
        
        echo "üìä Attempt 1 - HTTP Status: $http_code"
        echo "üì¶ Response: $response_body"
        
        # If first attempt fails, try with minimal JSON body
        if [ "$http_code" -ne 201 ] && [ "$http_code" -ne 200 ]; then
          echo "üîÑ Attempting deployment with minimal JSON body..."
          response=$(curl -s -w "\n%{http_code}" -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d '{"clearCache": false}')
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "üìä Attempt 2 - HTTP Status: $http_code"
          echo "üì¶ Response: $response_body"
        fi
        
        # If still fails, try without JSON content-type
        if [ "$http_code" -ne 201 ] && [ "$http_code" -ne 200 ]; then
          echo "üîÑ Attempting deployment without JSON content-type..."
          response=$(curl -s -w "\n%{http_code}" -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY")
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "üìä Attempt 3 - HTTP Status: $http_code"
          echo "üì¶ Response: $response_body"
        fi
        
        # Check if deployment was successful
        if [ "$http_code" -eq 201 ] || [ "$http_code" -eq 200 ]; then
          echo "‚úÖ Deployment triggered successfully!"
          echo "üì° Check your Render dashboard for deployment status"
          echo "üîó Your service: https://dashboard.render.com/web/$RENDER_SERVICE_ID"
        else
          echo "‚ùå Failed to trigger deployment"
          echo "Response: $response_body"
          exit 1
        fi

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ Deployment triggered successfully!"
          echo "Your app will be live in a few minutes at: https://closer-app.onrender.com"
        else
          echo "‚ùå Deployment failed. Check the logs above."
          echo "üí° Try using the deploy hook method instead."
        fi
