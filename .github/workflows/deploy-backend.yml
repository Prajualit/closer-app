name: Auto Deploy Backend to Render

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/**'
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: 🧪 Run Backend Tests (if any)
      working-directory: ./backend
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🚀 Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "🚀 Triggering Render deployment for service ID: $RENDER_SERVICE_ID"
        
        # Get service info
        SERVICE_INFO=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID")
        
        SERVICE_NAME=$(echo $SERVICE_INFO | jq -r '.name // "Unknown"')
        echo "📡 Deploying service: $SERVICE_NAME"
        
        # Trigger deployment
        DEPLOY_RESPONSE=$(curl -s -X POST \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": false
          }')
        
        DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id // "unknown"')
        
        if [ "$DEPLOY_ID" != "unknown" ] && [ "$DEPLOY_ID" != "null" ]; then
          echo "✅ Deployment triggered successfully!"
          echo "🆔 Deploy ID: $DEPLOY_ID"
          echo "🔗 Monitor deployment: https://dashboard.render.com/web/$RENDER_SERVICE_ID"
          echo "🌐 App URL: https://closer-app.onrender.com"
          
          # Wait a bit and check deployment status
          echo "⏳ Waiting for deployment to start..."
          sleep 10
          
          DEPLOY_STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$DEPLOY_ID" | \
            jq -r '.status // "unknown"')
          
          echo "📊 Current deployment status: $DEPLOY_STATUS"
        else
          echo "❌ Failed to trigger deployment"
          echo "Response: $DEPLOY_RESPONSE"
          exit 1
        fi

  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: success()
    
    steps:
    - name: Success Notification
      run: |
        echo "🎉 Backend deployment triggered successfully!"
        echo "🚀 Your app is being deployed to: https://closer-app.onrender.com"
        echo "⏱️  Deployment usually takes 2-5 minutes"
        echo "📊 Monitor progress: https://dashboard.render.com"

  notify-failure:
    name: ❌ Notify Failure  
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: failure()
    
    steps:
    - name: Failure Notification
      run: |
        echo "❌ Backend deployment failed!"
        echo "🔍 Check the logs above for details"
        echo "🛠️  Common fixes:"
        echo "   1. Verify RENDER_API_KEY and RENDER_SERVICE_ID secrets"
        echo "   2. Check backend code for syntax errors"
        echo "   3. Ensure all environment variables are set on Render"
